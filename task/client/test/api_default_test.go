/*
API Avito shop

Testing DefaultAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package openapi

import (
	"context"
	openapiclient "github.com/olgasinepalnikova/avito-task-2025-winter/client/go"
	"github.com/olgasinepalnikova/avito-task-2025-winter/client/test/helper"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"math/rand"
	"strconv"
	"testing"
)

func Test_openapi_DefaultAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test DefaultAPIService ApiAuthPost", func(t *testing.T) {

		req := openapiclient.AuthRequest{
			Username: "created user " + strconv.FormatInt(int64(rand.Int()), 10),
			Password: "created password " + strconv.FormatInt(int64(rand.Int()), 10),
		}

		resp, httpRes, err := apiClient.DefaultAPI.ApiAuthPost(context.Background()).AuthRequest(req).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService ApiBuyItemGet", func(t *testing.T) {

		jwtToken := helper.CreateUser(apiClient, t)

		cfg := openapiclient.NewConfiguration()
		cfg.DefaultHeader["Authorization"] = "Bearer " + jwtToken
		apiClient := openapiclient.NewAPIClient(cfg)

		var item = "pen"

		httpRes, err := apiClient.DefaultAPI.ApiBuyItemGet(context.Background(), item).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService ApiInfoGet", func(t *testing.T) {

		jwtToken := helper.CreateUser(apiClient, t)

		cfg := openapiclient.NewConfiguration()
		cfg.DefaultHeader["Authorization"] = "Bearer " + jwtToken
		apiClient := openapiclient.NewAPIClient(cfg)

		resp, httpRes, err := apiClient.DefaultAPI.ApiInfoGet(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		require.Equal(t, resp.GetCoins(), int32(1000))
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService ApiSendCoinPost", func(t *testing.T) {

		jwtTokenUser1 := helper.CreateUser(apiClient, t)
		jwtTokenUser2 := helper.CreateUser(apiClient, t)
		user2, err := helper.ParseToken(jwtTokenUser2)
		require.Nil(t, err)

		cfg := openapiclient.NewConfiguration()
		cfg.DefaultHeader["Authorization"] = "Bearer " + jwtTokenUser1
		apiClient := openapiclient.NewAPIClient(cfg)

		req := openapiclient.SendCoinRequest{
			ToUser: user2,
			Amount: 1000,
		}

		httpRes, err := apiClient.DefaultAPI.ApiSendCoinPost(context.Background()).SendCoinRequest(req).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
